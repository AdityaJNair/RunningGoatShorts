package graph306;
import pt.queues.FifoLifoQueue;
import pt.runtime.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import data_structures.AdjacencyList;
import data_structures.NodeObject;
import data_structures.UserOptions;
import visual.GraphVisualiser;

/*
*The ParallelSearchTree class is created to parallelize the branch and bound algorithm
* It extends the SolutionTree class to use the variables
*/
public class ParallelSearchTree extends SolutionTree{
	//Semaphore is to make sure that only a limited amount of threads are able to be created
	int semaphore = UserOptions.getInstance().getParallelThreads();

	//taskGroup is used to put all the parallel tasks
	TaskIDGroup taskGroup = new TaskIDGroup(UserOptions.getInstance().getParallelThreads()+5);
	GraphVisualiser visualFrame = null;
	
	/**Constructor to initialize the arguments
	 * @param inputGraph - Storing the input Adjacency list
	 */
	public ParallelSearchTree(AdjacencyList inputGraph) {
		super(inputGraph);
		if(UserOptions.getInstance().isVisible()){
			visualFrame = new GraphVisualiser(inputGraph, this);
		}
	}
	
	/* recursiveMethod is the parallel version of calculateTime from the SolutionTree.
	*@param currentNode - the currentNode 
	*@param nodesToCheck -  List of nodes that have not yet been seen in this branch of the tree
	*@param isSubTask - Checks which node is the root of the thread or not
	public void recursiveMethod(NodeObject currentNode, List<String> nodesToCheck, boolean isSubtask){
		
		// Exit condition for exiting recursion
		if(nodesToCheck.size() == 0){
			// Update the graph of the new path
			if(UserOptions.getInstance().isVisible() && visualFrame !=null){
				visualFrame.notifyFirstGraph(currentNode);
			}
			// Compare with minimumTime to see if this solution is better
			if(maxTimeAtPoint(currentNode) < minimumTime){
				//when tree all the way down, and the time is lower than the global flag, set the new time
				//and set the new schedule to it
				minimumTime = maxTimeAtPoint(currentNode);
				bestSchedule = currentNode.getCurrentPath();
				
				if(UserOptions.getInstance().isVisible() && visualFrame != null){
					visualFrame.notifyGraph(currentNode, minimumTime, endArray(bestSchedule));
				}
			}
			return;
		}
		
		// heuristics for pruning the tree
		if(minimumTime != Integer.MAX_VALUE){
			//if the time of current node but has not finished path is greater than optimal path which has finished dont bother looking
			if(maxTimeAtPoint(currentNode) >= minimumTime){
				return;
			}
		
			if(calculateLowerBound(currentNode, nodesToCheck) >= minimumTime){
				return;
			}
		}
		
		// Look through the list of unseen nodes and recursively call this method on nodes 
		// that do not have any parents on the nodesToCheck list.
		TaskID newTask = null;
		for(String nodeToCheckStr : nodesToCheck){
			if(isValidOption(nodeToCheckStr, nodesToCheck)){
				int count = 0;
				for(int i = 0 ; i <numberofProcessors; i++){
					if(currentNode.getTimeWeightOnEachProcessor()[i] == 0){
						count++;
					}
				}
				//pruning duplicate branches if it is the same value but just on different processors.
				int killtree = 0;
				if(count >= 2){
					killtree = count -1;
				}
				
				for(int j = 0; j < (numberofProcessors - killtree); j++){
					NodeObject newNode = createNextNode(currentNode, nodeToCheckStr, j);
					
					//copy the nodesToCheck list and need to remove the current node from it for recursion
					List<String> newUpdatedListWithoutCurrentNode = new LinkedList<String>(nodesToCheck);
					newUpdatedListWithoutCurrentNode.remove(nodeToCheckStr);
					nodeNumber++;
					if(UserOptions.getInstance().isVisible() && visualFrame != null){
						visualFrame.notifyParallelGraph(nodeNumber, semaphore);
					}
					
					//If it is the head of the thread than recursively go through the algorithm.
					if(isSubtask){
						recursiveMethod(newNode, newUpdatedListWithoutCurrentNode, true);
						continue;
					}
					// check if new thread can be created
					if(semaphore == 0){
						recursiveMethod(newNode, newUpdatedListWithoutCurrentNode, false);
					} else { //If there is still unused threads left than make more threads
						semaphore--;
						newTask = intermediateMethod(newNode, newUpdatedListWithoutCurrentNode);
						
						taskGroup.add(newTask);
					}
				}
			}
		}
		//If it is the head thread than it means that this thread is finished so return
		if(isSubtask){
			return;
		}
		
		//Wait for everything to finish before displaying the final graph.
		try{
			taskGroup.waitTillFinished();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	//This intermediate method is used to run the recursiveMethod method in parallel
	TASK private void intermediateMethod(NodeObject currentNode, List<String> nodesToCheck){
		recursiveMethod(currentNode, nodesToCheck, true);
		semaphore++;
	}
	
	/*createNextNode method is used to create the next valid node in the tree
	*@param currentNode - currentNode on the tree
	*@param nodeToCheckStr - the name of the node
	*@param processorNumber - the processor the node is in
	*/
	private NodeObject createNextNode(NodeObject currentNode, String nodeToCheckStr, int processorNumber){
		//create a newpath that is the same as current which includes the currentNode as well
		//same thing but only copying the processor array --not checking for times at this place
		ArrayList<NodeObject> nextPath = new ArrayList<NodeObject>(currentNode.getCurrentPath());
		int[] processorArray = Arrays.copyOf(currentNode.getTimeWeightOnEachProcessor(), currentNode.getTimeWeightOnEachProcessor().length);
		
		//initialising the fields for the new NodalObject to recurse through
		String newNodeName = nodeToCheckStr;
		int newProcessor = processorNumber;
		int nodalWeight = getNodalWeight(newNodeName);
		int newStartTime = checkProcessStartTimeTask(currentNode, newNodeName, newProcessor);
		int newEndTime = newStartTime+nodalWeight;
		processorArray[newProcessor] = newEndTime;
		
		//INITIALISE THE NEW NODE WITH UPDATED FIELDS
		NodeObject nextNode = new NodeObject(newProcessor, nextPath, newNodeName, processorArray, newStartTime, newEndTime);
		return nextNode;
	}
	
}
